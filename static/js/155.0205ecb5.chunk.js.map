{"version":3,"file":"static/js/155.0205ecb5.chunk.js","mappings":"iKAYA,EATgB,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACvB,OAAO,oBAASC,UAAWF,EAAI,UAAMA,GAAS,UAAvC,SAAmDC,GAC3D,C,qLCAKE,EAAgB,CACpBC,KAAM,GACNC,MAAO,IAGHC,EAASC,EAAAA,KAAaC,MAAM,CAChCJ,KAAMG,EAAAA,KAEHE,QAAQ,MAAO,gKACfC,IAAI,EAAG,8NACPC,SAAS,0FACZN,MAAOE,EAAAA,KAEJE,QAEC,yDACA,6RAEDE,SAAS,4FA2Dd,EAxDoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACfC,EAAY,mCAAG,WAAOC,EAAQC,GAAf,iFACbH,EAASE,GADI,OAEnBC,EAAQC,eAAc,GACtBD,EAAQE,YAHW,2CAAH,wDAMlB,OACE,+BACE,SAAC,KAAD,CACEL,SAAUC,EACVV,cAAeA,EACfe,iBAAkBZ,EAHpB,SAKG,gBAAGa,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,CAAMjB,UAAU,oBAAekB,aAAa,MAA5C,WACE,mBAAOlB,UAAU,WAAjB,WACE,kBAAMA,UAAU,QAAhB,iCACM,iBAAMA,UAAU,WAAhB,mBAEN,SAAC,KAAD,CAAOF,KAAK,OAAOI,KAAK,OAAOF,UAAU,WACzC,SAAC,KAAD,CACEmB,UAAU,MACVjB,KAAK,OACLF,UAAU,sBAGd,mBAAOA,UAAU,WAAjB,WACE,kBAAMA,UAAU,QAAhB,wDACS,iBAAMA,UAAU,WAAhB,mBAET,SAAC,KAAD,CAAOF,KAAK,MAAMI,KAAK,QAAQF,UAAU,WACzC,SAAC,KAAD,CACEmB,UAAU,MACVjB,KAAK,QACLF,UAAU,sBAGd,mBACEF,KAAK,SACLE,UAAU,aACVoB,SAAUH,EAHZ,uHAxBH,KAoCR,EC7BD,EAvCqB,WACnB,IAAMI,EAAY,mCAAG,WAAMT,GAAN,8EACfU,EADe,8GAEnBA,GAAO,+EAA0BV,EAAOV,KAAjC,MACPoB,GAAO,6DAAuBV,EAAOT,MAA9B,MAHY,mBAMXoB,EAAAA,EAAAA,GAAWD,GANA,OAOjBE,EAAAA,GAAAA,SACE,iBAAMC,MAAO,CAAEC,UAAW,UAA1B,mPAGA,CAAEC,SAAU,MAXG,gDAcjBH,EAAAA,GAAAA,MACE,0VACA,CAAEG,SAAU,MAhBG,yDAAH,sDAqBlB,OACE,SAACC,EAAA,EAAD,CAAS9B,KAAK,mBAAd,UACE,UAAC+B,EAAA,EAAD,YACE,eAAI7B,UAAU,gBAAd,+DACA,cAAGA,UAAU,OAAb,wTAIA,cAAGA,UAAU,iBAAb,gHACA,SAAC8B,EAAA,EAAD,CAAUC,MAAM,WAChB,cAAG/B,UAAU,iBAAb,6HACA,SAAC,EAAD,CAAaU,SAAUW,QAI9B,C,kGCzCDW,EAAAA,EAAAA,SAAAA,QAAyB,2BAElB,IAAMT,EAAU,mCAAG,WAAMD,GAAN,uFACDU,EAAAA,EAAAA,KAAA,cALX,iDAKW,gBAAuC,CAC5DC,QALY,aAMZC,WAAY,OACZC,KAAMb,IAJgB,cAClBc,EADkB,yBAMjBA,EAASC,MANQ,2CAAH,qD","sources":["components/common/Section/Section.jsx","components/ContactForm/ContactForm.jsx","pages/ContactsPage/ContactsPage.jsx","services/fetchTelegram.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport './Section.scss';\n\nconst Section = ({ type, children }) => {\n  return <section className={type ? `${type}` : 'section'}>{children}</section>;\n};\n\nSection.propTypes = {\n  type: PropTypes.string,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import PropTypes from 'prop-types';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport './ContactForm.scss';\n\nconst initialValues = {\n  name: '',\n  phone: '',\n};\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(/\\D/g, \"–ü–æ–ª–µ –Ü–º'—è –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ü–∏—Ñ—Ä–∏\")\n    .min(2, \"–ü–æ–ª–µ –Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏\")\n    .required(\"–û–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ\"),\n  phone: yup\n    .string()\n    .matches(\n      // eslint-disable-next-line no-useless-escape\n      /^((0|\\+3|\\+38|38))?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/g,\n      '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ \"0991112233\" –∞–±–æ \"+380991112233\"'\n    )\n    .required(\"–û–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ\"),\n});\n\nconst ContactForm = ({ onSubmit }) => {\n  const handleSubmit = async (values, actions) => {\n    await onSubmit(values);\n    actions.setSubmitting(false);\n    actions.resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        onSubmit={handleSubmit}\n        initialValues={initialValues}\n        validationSchema={schema}\n      >\n        {({ isSubmitting }) => (\n          <Form className=\"—Åontact-form\" autoComplete=\"off\">\n            <label className=\"fieldset\">\n              <span className=\"label\">\n                –Ü–º'—è<span className=\"required\">*</span>\n              </span>\n              <Field type=\"text\" name=\"name\" className=\"input\" />\n              <ErrorMessage\n                component=\"div\"\n                name=\"name\"\n                className=\"error-message\"\n              />\n            </label>\n            <label className=\"fieldset\">\n              <span className=\"label\">\n                –¢–µ–ª–µ—Ñ–æ–Ω<span className=\"required\">*</span>\n              </span>\n              <Field type=\"tel\" name=\"phone\" className=\"input\" />\n              <ErrorMessage\n                component=\"div\"\n                name=\"phone\"\n                className=\"error-message\"\n              />\n            </label>\n            <button\n              type=\"submit\"\n              className=\"submit-btn\"\n              disabled={isSubmitting}\n            >\n              –ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –º–µ–Ω—ñ\n            </button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;\n","import { submitInfo } from 'services/fetchTelegram';\nimport { toast } from 'react-hot-toast';\nimport Section from 'components/common/Section/Section';\nimport Container from 'components/common/Container/Container';\nimport Contacts from 'components/Contacts/Contacts';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport './ContactsPage.scss';\n\nconst ContactsPage = () => {\n  const handleSumbit = async values => {\n    let message = `<b>–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –¥–∑–≤—ñ–Ω–æ–∫!</b>\\n`;\n    message += `<b>–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫: </b>${values.name}\\n`;\n    message += `<b>–¢–µ–ª–µ—Ñ–æ–Ω: </b>${values.phone}\\n`;\n\n    try {\n      await submitInfo(message);\n      toast.success(\n        <span style={{ textAlign: 'center' }}>\n          –ì–æ—Ç–æ–≤–æ üòä –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n        </span>,\n        { duration: 3000 }\n      );\n    } catch {\n      toast.error(\n        '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ üòí. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑, –∞–±–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.',\n        { duration: 3000 }\n      );\n    }\n  };\n\n  return (\n    <Section type=\"contacts-section\">\n      <Container>\n        <h2 className=\"section-title\">–ö–æ–Ω—Ç–∞–∫—Ç–∏</h2>\n        <p className=\"text\">\n          –Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è:\n        </p>\n\n        <b className=\"callback-title\">–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–π—Ç–µ –Ω–∞–º</b>\n        <Contacts color=\"black\" />\n        <b className=\"callback-title\">–ú–∏ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –í–∞–º</b>\n        <ContactForm onSubmit={handleSumbit} />\n      </Container>\n    </Section>\n  );\n};\n\nexport default ContactsPage;\n","import axios from 'axios';\n\nconst TOKEN = '6246414340:AAH4BdxhsUayAjUMc2CrkylznxfDzN10PKI';\nconst CHAT_ID = '-826633706';\naxios.defaults.baseURL = 'https://api.telegram.org';\n\nexport const submitInfo = async message => {\n  const response = await axios.post(`/bot${TOKEN}/sendMessage`, {\n    chat_id: CHAT_ID,\n    parse_mode: 'html',\n    text: message,\n  });\n  return response.data;\n};\n"],"names":["type","children","className","initialValues","name","phone","schema","yup","shape","matches","min","required","onSubmit","handleSubmit","values","actions","setSubmitting","resetForm","validationSchema","isSubmitting","autoComplete","component","disabled","handleSumbit","message","submitInfo","toast","style","textAlign","duration","Section","Container","Contacts","color","axios","chat_id","parse_mode","text","response","data"],"sourceRoot":""}